name: CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [ "master" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend-call-automation
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Create logs directory
        run: |
          mkdir -p backend-call-automation/logs
          touch backend-call-automation/logs/app.log

      - name: Run tests
        run: |
          cd backend-call-automation
          pytest tests/ --cov=app -v

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend-call-automation/package-lock.json'

      - name: Install dependencies
        run: |
          cd frontend-call-automation
          npm ci

      - name: Run tests
        run: |
          cd frontend-call-automation
          npm test -- --passWithNoTests

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit (Python security scan)
        run: |
          cd backend-call-automation
          bandit -r app/ -f json -o bandit-results.json || true

      - name: Run npm audit (JavaScript security scan)
        run: |
          cd frontend-call-automation
          npm audit --json > npm-audit-results.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            backend-call-automation/bandit-results.json
            frontend-call-automation/npm-audit-results.json

  build:
    name: Build
    needs: [backend-tests, frontend-tests, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend-call-automation
          push: false
          tags: call-automation-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend-call-automation
          push: false
          tags: call-automation-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          echo "Preparando entorno para despliegue..."
          echo "DEPLOY_VERSION=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Deploy to staging
        run: |
          echo "Desplegando versión $DEPLOY_VERSION a entorno de staging..."
          # Aquí iría el código real para desplegar a staging
          # Por ejemplo, usando SSH para conectar a un servidor y ejecutar comandos
          echo "Despliegue a staging completado."

      - name: Run integration tests
        run: |
          echo "Ejecutando pruebas de integración en entorno de staging..."
          # Aquí irían las pruebas de integración
          echo "Pruebas de integración completadas exitosamente."

      - name: Deploy to production
        run: |
          echo "Desplegando versión $DEPLOY_VERSION a entorno de producción..."
          # Aquí iría el código real para desplegar a producción
          echo "Despliegue a producción completado."

      - name: Verify deployment
        run: |
          echo "Verificando despliegue en producción..."
          # Aquí irían las verificaciones post-despliegue
          echo "Verificación completada exitosamente."
