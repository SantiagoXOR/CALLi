name: Deploy / Rollback on Failure / Rollback on Failure

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean
      rollback_version:
        description: 'Version to rollback to (required if rollback is true)'
        required: false
        type: string

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      deploy_version: ${{ steps.set-version.outputs.version }}
      previous_version: ${{ steps.get-previous.outputs.version }}
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Set version
        id: set-version
        run: |
          if [ "${{ github.event.inputs.rollback }}" == "true" ]; then
            echo "version=${{ github.event.inputs.rollback_version }}" >> $GITHUB_OUTPUT
            echo "Preparing rollback to version ${{ github.event.inputs.rollback_version }}"
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "Preparing deployment of version ${{ github.event.inputs.version }}"
          else
            VERSION=$(date +'%Y%m%d%H%M%S')
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "Preparing deployment of new version ${VERSION}"
          fi

      - name: Get previous version
        id: get-previous
        run: |
          # En un entorno real, esto podría obtener la versión actual de la base de datos o de un archivo de configuración
          # Manejar el caso donde no hay commits previos
          if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            PREV_VERSION=$(git rev-parse --short HEAD~1)
          else
            PREV_VERSION="initial-version"
          fi
          echo "version=${PREV_VERSION}" >> $GITHUB_OUTPUT
          echo "Previous version: ${PREV_VERSION}"

  deploy:
    name: Deploy
    needs: prepare
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          echo "Preparando entorno para despliegue..."
          echo "Versión a desplegar: ${{ needs.prepare.outputs.deploy_version }}"
          echo "Entorno: ${{ needs.prepare.outputs.environment }}"
          
          # Crear directorio de logs si no existe
          mkdir -p logs

      - name: Deploy
        id: deploy
        run: |
          echo "Iniciando despliegue de versión ${{ needs.prepare.outputs.deploy_version }} a ${{ needs.prepare.outputs.environment }}..."
          
          # Crear archivo de log si no existe
          touch logs/deploy.log
          
          # Simular despliegue (en un entorno real, aquí iría el código de despliegue)
          echo "$(date): Iniciando despliegue de versión ${{ needs.prepare.outputs.deploy_version }}" >> logs/deploy.log
          
          # Verificar si es un rollback
          if [ "${{ github.event.inputs.rollback }}" == "true" ]; then
            echo "Ejecutando rollback a versión ${{ needs.prepare.outputs.deploy_version }}..."
            # Simular rollback (en un entorno real, aquí iría el código de rollback)
            echo "$(date): Ejecutando rollback a versión ${{ needs.prepare.outputs.deploy_version }}" >> logs/deploy.log
            
            # Simular éxito del rollback
            echo "$(date): Rollback completado exitosamente" >> logs/deploy.log
            echo "Rollback completado exitosamente."
          else
            echo "Ejecutando despliegue normal..."
            # Simular despliegue normal
            echo "$(date): Ejecutando despliegue normal de versión ${{ needs.prepare.outputs.deploy_version }}" >> logs/deploy.log
            
            # Simular éxito del despliegue
            echo "$(date): Despliegue completado exitosamente" >> logs/deploy.log
            echo "Despliegue completado exitosamente."
          fi

      - name: Verify deployment
        id: verify
        run: |
          echo "Verificando despliegue..."
          
          # Simular verificación (en un entorno real, aquí irían pruebas de humo o verificaciones)
          echo "$(date): Iniciando verificación del despliegue" >> logs/deploy.log
          
          # Simular éxito de la verificación
          echo "$(date): Verificación completada exitosamente" >> logs/deploy.log
          echo "Verificación completada exitosamente."

      - name: Upload deployment logs
        uses: actions/upload-artifact@v3
        with:
          name: deployment-logs
          path: logs/deploy.log

  rollback-on-failure:
    name: Rollback on Failure
    needs: [prepare, deploy]
    runs-on: ubuntu-latest
    if: always() && needs.deploy.result == 'failure' && github.event.inputs.rollback != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          echo "Preparando entorno para rollback..."
          echo "Versión actual: ${{ needs.prepare.outputs.deploy_version }}"
          echo "Versión anterior: ${{ needs.prepare.outputs.previous_version }}"
          echo "Entorno: ${{ needs.prepare.outputs.environment }}"
          
          # Crear directorio de logs si no existe
          mkdir -p logs

      - name: Execute rollback
        run: |
          echo "Iniciando rollback a versión ${{ needs.prepare.outputs.previous_version }}..."
          
          # Crear archivo de log si no existe
          touch logs/rollback.log
          
          # Simular rollback (en un entorno real, aquí iría el código de rollback)
          echo "$(date): Iniciando rollback de versión ${{ needs.prepare.outputs.deploy_version }} a ${{ needs.prepare.outputs.previous_version }}" >> logs/rollback.log
          
          # Simular éxito del rollback
          echo "$(date): Rollback completado exitosamente" >> logs/rollback.log
          echo "Rollback completado exitosamente."

      - name: Verify rollback
        run: |
          echo "Verificando rollback..."
          
          # Simular verificación (en un entorno real, aquí irían pruebas de humo o verificaciones)
          echo "$(date): Iniciando verificación del rollback" >> logs/rollback.log
          
          # Simular éxito de la verificación
          echo "$(date): Verificación del rollback completada exitosamente" >> logs/rollback.log
          echo "Verificación del rollback completada exitosamente."

      - name: Upload rollback logs
        uses: actions/upload-artifact@v3
        with:
          name: rollback-logs
          path: logs/rollback.log

      - name: Notify rollback
        run: |
          echo "Notificando rollback a equipo de desarrollo..."
          # En un entorno real, aquí iría código para enviar notificaciones
          echo "Notificación enviada."
