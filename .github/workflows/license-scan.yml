name: "License Compliance"

on:
  push:
    branches: [ "master" ]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'frontend-call-automation/package.json'
      - 'frontend-call-automation/package-lock.json'
      - 'backend-call-automation/requirements.txt'
      - 'backend-call-automation/pyproject.toml'
      - '.github/workflows/license-scan.yml'
  pull_request:
    branches: [ "master" ]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'frontend-call-automation/package.json'
      - 'frontend-call-automation/package-lock.json'
      - 'backend-call-automation/requirements.txt'
      - 'backend-call-automation/pyproject.toml'
      - '.github/workflows/license-scan.yml'
  schedule:
    - cron: '0 0 1 * *'  # Ejecutar el primer día de cada mes a medianoche

jobs:
  license-scan:
    name: License Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install license-checker for JavaScript
        run: npm install -g license-checker

      - name: Install pip-licenses for Python
        run: pip install pip-licenses

      - name: Check JavaScript licenses
        run: |
          if [ -f frontend-call-automation/package.json ]; then
            cd frontend-call-automation
            echo "Analizando licencias de dependencias JavaScript..."
            # Usar --production para reducir falsos positivos y manejar errores
            license-checker --json --production --out ../js-licenses.json || true

            # Verificar si el archivo existe y tiene contenido
            if [ -f "../js-licenses.json" ] && [ -s "../js-licenses.json" ]; then
              # Verificar licencias problemáticas
              echo "Verificando licencias potencialmente problemáticas..."
              PROHIBITED_LICENSES=("GPL" "AGPL" "LGPL" "EUPL" "CDDL" "EPL" "MPL" "UNKNOWN")
              FOUND_PROHIBITED=false

              for license in "${PROHIBITED_LICENSES[@]}"; do
                if grep -q "$license" ../js-licenses.json; then
                  echo "⚠️ Encontrada licencia potencialmente problemática: $license"
                  FOUND_PROHIBITED=true
                fi
              done

              if [ "$FOUND_PROHIBITED" = false ]; then
                echo "✅ No se encontraron licencias prohibidas en dependencias JavaScript."
              fi
            else
              echo "No se pudo generar el archivo de licencias o está vacío."
              echo "{}" > ../js-licenses.json
            fi

            cd ..
          else
            echo "No se encontró package.json en frontend-call-automation"
          fi

      - name: Check Python licenses
        run: |
          if [ -f backend-call-automation/requirements.txt ]; then
            cd backend-call-automation
            echo "Instalando dependencias Python..."
            # Instalar dependencias con manejo de errores
            pip install -r requirements.txt || echo "Algunas dependencias no se pudieron instalar, pero continuamos el análisis"

            echo "Analizando licencias de dependencias Python..."
            # Ejecutar pip-licenses con manejo de errores
            pip-licenses --format=json --output-file=../py-licenses.json || true

            # Verificar si el archivo existe y tiene contenido
            if [ -f "../py-licenses.json" ] && [ -s "../py-licenses.json" ]; then
              # Verificar licencias problemáticas
              echo "Verificando licencias potencialmente problemáticas..."
              PROHIBITED_LICENSES=("GPL" "AGPL" "LGPL" "EUPL" "CDDL" "EPL" "MPL" "UNKNOWN")
              FOUND_PROHIBITED=false

              for license in "${PROHIBITED_LICENSES[@]}"; do
                if grep -q "$license" ../py-licenses.json; then
                  echo "⚠️ Encontrada licencia potencialmente problemática: $license"
                  FOUND_PROHIBITED=true
                fi
              done

              if [ "$FOUND_PROHIBITED" = false ]; then
                echo "✅ No se encontraron licencias prohibidas en dependencias Python."
              fi
            else
              echo "No se pudo generar el archivo de licencias o está vacío."
              echo "[]" > ../py-licenses.json
            fi

            cd ..
          else
            echo "No se encontró requirements.txt en backend-call-automation"
          fi

      - name: Create empty license files if they don't exist
        run: |
          # Crear archivos vacíos si no existen
          if [ ! -f "js-licenses.json" ]; then
            echo "{}" > js-licenses.json
          fi

          if [ ! -f "py-licenses.json" ]; then
            echo "[]" > py-licenses.json
          fi

      - name: Upload license scan results
        uses: actions/upload-artifact@v3
        with:
          name: license-scan-results
          path: |
            js-licenses.json
            py-licenses.json
