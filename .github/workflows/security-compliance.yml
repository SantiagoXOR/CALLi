name: "Verificación de Cumplimiento de Seguridad"

on:
  schedule:
    - cron: '0 0 1 * *'  # Ejecutar el primer día de cada mes a medianoche
  workflow_dispatch:  # Permitir ejecución manual

jobs:
  security-compliance:
    name: Verificar Cumplimiento de Seguridad
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install markdown

      - name: Create compliance check script
        run: |
          cat > check_security_compliance.py << 'EOF'
          import os
          import json
          import re
          import sys
          from datetime import datetime

          # Lista de verificaciones de cumplimiento
          COMPLIANCE_CHECKS = {
              "security_policy": {
                  "description": "Política de seguridad (SECURITY.md)",
                  "path": "SECURITY.md",
                  "required": True
              },
              "code_of_conduct": {
                  "description": "Código de conducta (CODE_OF_CONDUCT.md)",
                  "path": "CODE_OF_CONDUCT.md",
                  "required": False
              },
              "contributing_guidelines": {
                  "description": "Guía de contribución (.github/CONTRIBUTING.md)",
                  "path": ".github/CONTRIBUTING.md",
                  "required": True
              },
              "pull_request_template": {
                  "description": "Plantilla de Pull Request (.github/PULL_REQUEST_TEMPLATE.md)",
                  "path": ".github/PULL_REQUEST_TEMPLATE.md",
                  "required": True
              },
              "security_issue_template": {
                  "description": "Plantilla de Issue de Seguridad (.github/ISSUE_TEMPLATE/security_issue.md)",
                  "path": ".github/ISSUE_TEMPLATE/security_issue.md",
                  "required": True
              },
              "codeql_workflow": {
                  "description": "Flujo de trabajo de CodeQL (.github/workflows/codeql-analysis.yml)",
                  "path": ".github/workflows/codeql-analysis.yml",
                  "required": True
              },
              "dependabot_config": {
                  "description": "Configuración de Dependabot (.github/dependabot.yml)",
                  "path": ".github/dependabot.yml",
                  "required": True
              },
              "secret_scanning_workflow": {
                  "description": "Flujo de trabajo de escaneo de secretos (.github/workflows/secret-scanning.yml)",
                  "path": ".github/workflows/secret-scanning.yml",
                  "required": True
              }
          }

          # Verificaciones adicionales basadas en contenido
          CONTENT_CHECKS = {
              "security_contact": {
                  "description": "Información de contacto de seguridad en SECURITY.md",
                  "file": "SECURITY.md",
                  "pattern": r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+",
                  "required": True
              },
              "security_headers": {
                  "description": "Configuración de encabezados de seguridad",
                  "file": "nginx/conf.d/default.conf",
                  "pattern": r"add_header\s+(X-Content-Type-Options|X-Frame-Options|Content-Security-Policy|Strict-Transport-Security)",
                  "required": False
              },
              "csrf_protection": {
                  "description": "Protección CSRF en aplicaciones web",
                  "file": "frontend-call-automation/src/lib/api.js",
                  "pattern": r"csrf|xsrf",
                  "required": False
              }
          }

          def check_file_exists(path):
              return os.path.exists(path)

          def check_file_content(file_path, pattern):
              if not os.path.exists(file_path):
                  return False

              try:
                  with open(file_path, 'r', encoding='utf-8') as f:
                      content = f.read()
                      return bool(re.search(pattern, content, re.IGNORECASE))
              except Exception as e:
                  print(f"Error al leer {file_path}: {str(e)}")
                  return False

          def generate_markdown_report(file_results, content_results):
              md = "# Informe de Cumplimiento de Seguridad\n\n"
              md += f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"

              # Resumen
              total_checks = len(file_results) + len(content_results)
              passed_checks = sum(1 for r in file_results.values() if r['status'] == 'PASS')
              passed_checks += sum(1 for r in content_results.values() if r['status'] == 'PASS')

              failed_required = sum(1 for r in file_results.values() if r['status'] == 'FAIL' and r['required'])
              failed_required += sum(1 for r in content_results.values() if r['status'] == 'FAIL' and r['required'])

              md += f"## Resumen\n\n"
              md += f"- **Total de verificaciones:** {total_checks}\n"
              md += f"- **Verificaciones aprobadas:** {passed_checks} ({passed_checks/total_checks*100:.1f}%)\n"
              md += f"- **Verificaciones requeridas fallidas:** {failed_required}\n\n"

              # Estado general
              if failed_required > 0:
                  md += "**Estado general: ❌ NO CUMPLE**\n\n"
                  md += "El proyecto no cumple con los requisitos mínimos de seguridad. Por favor, corrija los problemas marcados como requeridos.\n\n"
              else:
                  md += "**Estado general: ✅ CUMPLE**\n\n"
                  md += "El proyecto cumple con los requisitos mínimos de seguridad. Considere implementar las recomendaciones adicionales.\n\n"

              # Verificaciones de archivos
              md += "## Verificaciones de Archivos\n\n"
              md += "| Verificación | Estado | Requerido | Ruta |\n"
              md += "|-------------|--------|-----------|------|\n"

              for check_id, result in file_results.items():
                  status_icon = "✅" if result['status'] == 'PASS' else "❌"
                  required = "Sí" if result['required'] else "No"
                  md += f"| {result['description']} | {status_icon} | {required} | `{result['path']}` |\n"

              # Verificaciones de contenido
              md += "\n## Verificaciones de Contenido\n\n"
              md += "| Verificación | Estado | Requerido | Archivo |\n"
              md += "|-------------|--------|-----------|------|\n"

              for check_id, result in content_results.items():
                  status_icon = "✅" if result['status'] == 'PASS' else "❌"
                  required = "Sí" if result['required'] else "No"
                  md += f"| {result['description']} | {status_icon} | {required} | `{result['file']}` |\n"

              # Recomendaciones
              md += "\n## Recomendaciones\n\n"

              # Problemas requeridos
              required_issues = [r for r in file_results.values() if r['status'] == 'FAIL' and r['required']]
              required_issues += [r for r in content_results.values() if r['status'] == 'FAIL' and r['required']]

              if required_issues:
                  md += "### Problemas Críticos (Requeridos)\n\n"
                  for issue in required_issues:
                      if 'path' in issue:
                          md += f"- Crear o actualizar `{issue['path']}`: {issue['description']}\n"
                      else:
                          md += f"- Implementar en `{issue['file']}`: {issue['description']}\n"
                  md += "\n"

              # Mejoras opcionales
              optional_issues = [r for r in file_results.values() if r['status'] == 'FAIL' and not r['required']]
              optional_issues += [r for r in content_results.values() if r['status'] == 'FAIL' and not r['required']]

              if optional_issues:
                  md += "### Mejoras Recomendadas (Opcionales)\n\n"
                  for issue in optional_issues:
                      if 'path' in issue:
                          md += f"- Considere crear `{issue['path']}`: {issue['description']}\n"
                      else:
                          md += f"- Considere implementar en `{issue['file']}`: {issue['description']}\n"
                  md += "\n"

              return md

          if __name__ == "__main__":
              # Verificar archivos
              file_results = {}
              for check_id, check_info in COMPLIANCE_CHECKS.items():
                  result = {
                      "description": check_info["description"],
                      "path": check_info["path"],
                      "required": check_info["required"],
                      "status": "PASS" if check_file_exists(check_info["path"]) else "FAIL"
                  }
                  file_results[check_id] = result

              # Verificar contenido
              content_results = {}
              for check_id, check_info in CONTENT_CHECKS.items():
                  result = {
                      "description": check_info["description"],
                      "file": check_info["file"],
                      "required": check_info["required"],
                      "status": "PASS" if check_file_content(check_info["file"], check_info["pattern"]) else "FAIL"
                  }
                  content_results[check_id] = result

              # Guardar resultados en formato JSON
              all_results = {
                  "timestamp": datetime.now().isoformat(),
                  "file_checks": file_results,
                  "content_checks": content_results
              }

              with open('security_compliance_results.json', 'w') as f:
                  json.dump(all_results, f, indent=2)

              # Generar informe en Markdown
              markdown_report = generate_markdown_report(file_results, content_results)
              with open('security_compliance_report.md', 'w') as f:
                  f.write(markdown_report)

              # Determinar el código de salida
              failed_required = sum(1 for r in file_results.values() if r['status'] == 'FAIL' and r['required'])
              failed_required += sum(1 for r in content_results.values() if r['status'] == 'FAIL' and r['required'])

              print("Verificación de cumplimiento completada.")
              print(f"Resultados guardados en security_compliance_results.json y security_compliance_report.md")

              if failed_required > 0:
                  print(f"❌ NO CUMPLE: {failed_required} verificaciones requeridas fallidas")
                  sys.exit(1)
              else:
                  print("✅ CUMPLE: Todos los requisitos mínimos de seguridad están satisfechos")
                  sys.exit(0)
          EOF

      - name: Run compliance check
        run: python check_security_compliance.py
        continue-on-error: true

      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: security-compliance-report
          path: |
            security_compliance_results.json
            security_compliance_report.md
