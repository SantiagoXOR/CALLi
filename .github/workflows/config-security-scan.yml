name: Configuration Security Scan

on:
  push:
    branches: [ "master" ]
    paths:
      - '**/*.json'
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.toml'
      - '**/*.ini'
      - '**/*.conf'
      - '**/*.env.example'
      - '.github/workflows/config-security-scan.yml'
  pull_request:
    branches: [ "master" ]
    paths:
      - '**/*.json'
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.toml'
      - '**/*.ini'
      - '**/*.conf'
      - '**/*.env.example'
      - '.github/workflows/config-security-scan.yml'
  schedule:
    - cron: '0 0 * * 1'  # Ejecutar cada lunes a medianoche

jobs:
  config-security-scan:
    name: Configuration Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install detect-secrets trufflehog3 yamllint

      - name: Scan for secrets with detect-secrets
        run: |
          echo "Escaneando archivos de configuración en busca de secretos..."
          detect-secrets scan --all-files > detect-secrets-results.json
          
          # Verificar si se encontraron secretos
          if grep -q "\"results\": {}" detect-secrets-results.json; then
            echo "✅ No se encontraron secretos con detect-secrets."
          else
            echo "⚠️ Se encontraron posibles secretos. Revisar detect-secrets-results.json para más detalles."
            cat detect-secrets-results.json
          fi

      - name: Scan for secrets with trufflehog
        run: |
          echo "Escaneando repositorio en busca de secretos con trufflehog..."
          trufflehog3 --no-history --output trufflehog-results.json .
          
          # Verificar si se encontraron secretos
          if [ ! -s trufflehog-results.json ]; then
            echo "✅ No se encontraron secretos con trufflehog."
          else
            echo "⚠️ Se encontraron posibles secretos. Revisar trufflehog-results.json para más detalles."
            cat trufflehog-results.json
          fi

      - name: Validate YAML files
        run: |
          echo "Validando archivos YAML..."
          yamllint -c .yamllint.yml .
          
          # Crear archivo de configuración de yamllint si no existe
          if [ ! -f .yamllint.yml ]; then
            cat > .yamllint.yml << EOF
extends: default

rules:
  line-length: disable
  document-start: disable
  truthy:
    allowed-values: ['true', 'false', 'yes', 'no']
  comments:
    min-spaces-from-content: 1
EOF
          fi

      - name: Check for hardcoded credentials
        run: |
          echo "Verificando credenciales hardcodeadas..."
          
          # Patrones a buscar
          PATTERNS=(
            "password:"
            "apikey:"
            "api_key:"
            "secret:"
            "token:"
            "access_key:"
            "auth:"
            "credential:"
            "pass:"
            "pwd:"
          )
          
          # Archivos a excluir
          EXCLUDE=(
            ".git"
            "node_modules"
            "venv"
            ".venv"
            "__pycache__"
            "*.min.js"
            "*.min.css"
            "package-lock.json"
            "yarn.lock"
            "detect-secrets-results.json"
            "trufflehog-results.json"
          )
          
          # Construir comando de exclusión
          EXCLUDE_CMD=""
          for pattern in "${EXCLUDE[@]}"; do
            EXCLUDE_CMD="$EXCLUDE_CMD --exclude-dir=$pattern"
          done
          
          # Buscar patrones
          FOUND_CREDENTIALS=false
          
          for pattern in "${PATTERNS[@]}"; do
            echo "Buscando patrón: $pattern"
            RESULTS=$(grep -r $EXCLUDE_CMD --include="*.json" --include="*.yaml" --include="*.yml" --include="*.toml" --include="*.ini" --include="*.conf" --include="*.env.example" "$pattern" . || true)
            
            if [ -n "$RESULTS" ]; then
              echo "⚠️ Encontrado patrón '$pattern' en los siguientes archivos:"
              echo "$RESULTS"
              FOUND_CREDENTIALS=true
            fi
          done
          
          if [ "$FOUND_CREDENTIALS" = false ]; then
            echo "✅ No se encontraron credenciales hardcodeadas."
          else
            echo "⚠️ Se encontraron posibles credenciales hardcodeadas. Revisar los resultados anteriores."
          fi

      - name: Check for insecure configurations
        run: |
          echo "Verificando configuraciones inseguras..."
          
          # Patrones a buscar
          INSECURE_PATTERNS=(
            "debug: true"
            "debug=true"
            "\"debug\": true"
            "ssl_verify: false"
            "verify_ssl: false"
            "\"ssl_verify\": false"
            "\"verify_ssl\": false"
            "allowInsecure"
            "allow_insecure"
            "insecure_skip_verify"
            "disable_ssl_verification"
          )
          
          # Archivos a excluir
          EXCLUDE=(
            ".git"
            "node_modules"
            "venv"
            ".venv"
            "__pycache__"
            "*.min.js"
            "*.min.css"
            "package-lock.json"
            "yarn.lock"
          )
          
          # Construir comando de exclusión
          EXCLUDE_CMD=""
          for pattern in "${EXCLUDE[@]}"; do
            EXCLUDE_CMD="$EXCLUDE_CMD --exclude-dir=$pattern"
          done
          
          # Buscar patrones
          FOUND_INSECURE=false
          
          for pattern in "${INSECURE_PATTERNS[@]}"; do
            echo "Buscando patrón: $pattern"
            RESULTS=$(grep -r $EXCLUDE_CMD --include="*.json" --include="*.yaml" --include="*.yml" --include="*.toml" --include="*.ini" --include="*.conf" --include="*.env.example" "$pattern" . || true)
            
            if [ -n "$RESULTS" ]; then
              echo "⚠️ Encontrado patrón inseguro '$pattern' en los siguientes archivos:"
              echo "$RESULTS"
              FOUND_INSECURE=true
            fi
          done
          
          if [ "$FOUND_INSECURE" = false ]; then
            echo "✅ No se encontraron configuraciones inseguras."
          else
            echo "⚠️ Se encontraron posibles configuraciones inseguras. Revisar los resultados anteriores."
          fi

      - name: Upload scan results
        uses: actions/upload-artifact@v3
        with:
          name: config-security-scan-results
          path: |
            detect-secrets-results.json
            trufflehog-results.json
